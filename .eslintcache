[{"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\index.js":"1","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\App.js":"2","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\index.js":"3","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\Home.js":"4","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\EntityDisplay.js":"5","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\NavBar.js":"6","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\modalReducer.js":"7","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\reportListReducer.js":"8","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\botListReducer.js":"9","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\entityReducer.js":"10","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\ReportDisplay.js":"11","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\index.js":"12","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\BotList.js":"13","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\global.js":"14","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBotModal.js":"15","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\index.js":"16","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBot.js":"17","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\modalAction.js":"18","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\botListAction.js":"19","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\reportListAction.js":"20","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\entityAction.js":"21"},{"size":538,"mtime":1611290659191,"results":"22","hashOfConfig":"23"},{"size":1016,"mtime":1615096705934,"results":"24","hashOfConfig":"23"},{"size":464,"mtime":1611330656617,"results":"25","hashOfConfig":"23"},{"size":403,"mtime":1615096656722,"results":"26","hashOfConfig":"23"},{"size":2529,"mtime":1615098602350,"results":"27","hashOfConfig":"23"},{"size":535,"mtime":1615047578064,"results":"28","hashOfConfig":"23"},{"size":1074,"mtime":1611329195464,"results":"29","hashOfConfig":"23"},{"size":492,"mtime":1611512387579,"results":"30","hashOfConfig":"23"},{"size":682,"mtime":1611309147611,"results":"31","hashOfConfig":"23"},{"size":480,"mtime":1611327840926,"results":"32","hashOfConfig":"23"},{"size":3286,"mtime":1616998725906,"results":"33","hashOfConfig":"23"},{"size":112,"mtime":1611290659193,"results":"34","hashOfConfig":"23"},{"size":7083,"mtime":1619881634482,"results":"35","hashOfConfig":"23"},{"size":5957,"mtime":1618137157306,"results":"36","hashOfConfig":"23"},{"size":1154,"mtime":1612708968829,"results":"37","hashOfConfig":"23"},{"size":134,"mtime":1611330122768,"results":"38","hashOfConfig":"23"},{"size":5290,"mtime":1621333309189,"results":"39","hashOfConfig":"23"},{"size":1099,"mtime":1611328912402,"results":"40","hashOfConfig":"23"},{"size":1085,"mtime":1614575914637,"results":"41","hashOfConfig":"23"},{"size":655,"mtime":1614601737715,"results":"42","hashOfConfig":"23"},{"size":631,"mtime":1614569931124,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"vlm0od",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\index.js",[],["90","91"],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\App.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\Home.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\EntityDisplay.js",["92","93"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport * as action from \"../../store/actions\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport * as CONSTANTS from '../../global';\r\n\r\nconst EntityDisplay = () => {\r\n    \r\n    const { name } = useParams();\r\n    //const entityDetails = useSelector(state => state.entity.item);\r\n    const dispatch = useDispatch();\r\n    //const reports = entityDetails.taggedReports;\r\n    const [entity, setEntity] = useState(null);\r\n\r\n    useEffect(() => {\r\n        console.log(\"entity name: \" + name);\r\n        dispatch(action.getEntityByName(name));\r\n        axios.get(CONSTANTS.GLOBAL_URL + \"/entity/retrieveByEntityName/\" + name)\r\n        .then((response) => {\r\n            console.log(\"response: \" + JSON.stringify(response));\r\n            setEntity(response);\r\n          }, (error) => {\r\n            console.log(\"error: \" + JSON.stringify(error));\r\n        });\r\n      }, [dispatch])\r\n\r\n    return (  \r\n        entity !== null ? (\r\n        <div className=\"Entity-Display\" style={{width: '100%' }}>\r\n            <br />\r\n            <h3>{name}</h3>\r\n            <br /><br />\r\n            <h6>Tagged Report IDs:</h6>\r\n            {entity.data.taggedReports.map(reportid => (\r\n                <Link className=\"tagged-links\" to={`/report/${reportid}`}>\r\n                    { reportid }\r\n                </Link>\r\n            ))}\r\n            <br /><br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Gender'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityGender}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Country'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityCountry}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Appointment'\r\n                variant='outlined' \r\n                style ={{width: '30%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityAppointment}\r\n            />\r\n            <br /><br />        \r\n        </div>\r\n         ) : (\r\n            <div>Loading...</div> \r\n         )\r\n    );\r\n}\r\n \r\nexport default EntityDisplay;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\NavBar.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\modalReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\reportListReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\botListReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\entityReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\ReportDisplay.js",["94","95","96","97"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport * as action from \"../../store/actions\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport stripquotes from \"stripquotes\";\r\nimport axios from 'axios';\r\nimport * as CONSTANTS from '../../global';\r\nimport moment from 'moment'\r\nimport ReactHtmlParser from 'react-html-parser'\r\n\r\nconst ReportDisplay = () => {\r\n\r\n    const { id } = useParams();\r\n    //const reportredux = useSelector(state => state.report.item);\r\n    const dispatch = useDispatch();\r\n    const [report, setReport] = useState(null);\r\n    let reportContent=\"\";\r\n    \r\n    useEffect(() => {\r\n      console.log(\"report id: \" + id);     \r\n      //dispatch(action.getreportByID(id));\r\n      axios.get(CONSTANTS.GLOBAL_URL + \"/report/retrieveById/\" + id)\r\n      .then((response) => {\r\n        //reportContent = stripquotes(JSON.stringify(response.data.reportContent));\r\n        //console.log(\"report content \" + reportContent);\r\n\r\n        setReport(response);      \r\n        console.log(\"response: \" + JSON.stringify(response));\r\n      }, (error) => {\r\n        console.log(\"error: \" + JSON.stringify(error));\r\n      });\r\n    }, [dispatch])\r\n\r\n    return (\r\n        report !== null ? (\r\n        <div className=\"Report-Display\" style={{width: '100%' }}>\r\n            <br />\r\n            <h3>Display Report</h3>\r\n            <br /><br />\r\n            <h6>Tagged Entities:</h6>\r\n            {report.data.taggedEntities.map(entity => (\r\n               <Link className=\"tagged-links\" to={`/entity/${entity}`}>\r\n                    { entity }\r\n                </Link>\r\n            ))}\r\n            <br /><br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'ID'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(report.data.reportDocid))}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Date'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(moment(report.data.reportDate).format(\"DD/MM/YYYY\")))}\r\n            />\r\n            <br /><br />                       \r\n            <TextField \r\n                type='text'\r\n                label = 'Title'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(report.data.reportTitle))}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text' \r\n                label = 'Content'  \r\n                variant='outlined'\r\n                multiline\r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n              //  value={stripquotes(JSON.stringify(report.data.reportContent))}\r\n              value = {ReactHtmlParser(report.data.reportContent)}\r\n            />\r\n        </div>\r\n        ) : (\r\n           <div>Loading...</div> \r\n        )\r\n    );\r\n}\r\n \r\nexport default ReportDisplay;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\BotList.js",["98","99","100","101","102","103","104"],"import React, { useEffect } from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as action from \"../../store/actions\";\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport moment from 'moment';\r\nimport * as CONSTANTS from '../../global';\r\n\r\nfunction BotList() {\r\n    const botList = useSelector(state => state.botList.items)\r\n    const bot = useSelector(state => state.botList.botDetails)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n       dispatch(action.getBotList());\r\n    }, [dispatch])\r\n\r\n    function retrieveBot(id) {\r\n        dispatch(action.getBotByID(id));\r\n        console.log(JSON.stringify(bot))\r\n    }\r\n\r\n    const [state, setState] = React.useState({\r\n        checkedA: true,      \r\n      });\r\n    \r\n      const handleChange = (event) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n      };\r\n\r\n    return (\r\n        <div className=\"d-flex flex-row\">\r\n            <div className=\"d-flex flex-column\" style={{width: \"18em\", backgroundColor: \"ghostwhite\"}}>\r\n                <br />\r\n                <h4 style={{textAlign: 'center'}}>Bot List</h4>\r\n                <ul className='bot-list'>\r\n                    {botList.map(el => (\r\n                        <li className='bullets-left'><Button className=\"list-bots\" onClick={() => retrieveBot(el.id)}>{el.jobName}</Button></li>\r\n                    ))} \r\n                </ul>\r\n            </div>\r\n            <div className=\"flex-column\" style={{width: \"8em\"}}></div>\r\n            <div className=\"flex-column\" style={{width: \"45em\"}}>             \r\n                <br /><br />\r\n                <label>Bot Name</label>&nbsp;&nbsp;&nbsp;\r\n                <TextField \r\n                type='text'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={bot && JSON.stringify(bot.jobName)}\r\n                />\r\n                <br /><br />\r\n                <label>Start Date</label>&nbsp;&nbsp;&nbsp;\r\n                <TextField \r\n                type='text'\r\n                variant='outlined'\r\n                style ={{width: '50%'}} \r\n                inputProps={{ readOnly: true }}\r\n                value={bot && moment(bot.startDate).format(\"DD/MM/YYYY\")}\r\n                />\r\n                <br /><br />\r\n                <label>End Date</label>&nbsp;&nbsp;&nbsp;\r\n                <TextField \r\n                type='text'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={bot && moment(bot.endDate).format(\"DD/MM/YYYY\")}\r\n                />\r\n                <br /><br />\r\n                <label>Keywords</label>&nbsp;&nbsp;&nbsp;\r\n                <TextField \r\n                type='text'\r\n                variant='outlined'\r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={bot && bot.keywords}\r\n                />\r\n                <br /><br />\r\n                <h5>Tagged Report IDs</h5>\r\n                    {bot && bot.taggedReports && bot.taggedReports.map(reportid=> (\r\n                         <Link className=\"tagged-links\" to={`/report/${reportid}`}>\r\n                            { reportid }\r\n                        </Link>\r\n                    ))}\r\n                <br /><br />\r\n                {bot && (\r\n                <FormGroup row>\r\n                    <label>Extractive</label>&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <FormControlLabel\r\n                        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\r\n                    />\r\n                    <label>Abstractive</label>\r\n                </FormGroup>\r\n                )}\r\n                <div className=\"p-2 flex-fill\">    \r\n                    {bot && bot.chkBoxSummary && state.checkedA == true && (\r\n                        <h5>Abstractive Summary</h5>\r\n                    )}\r\n                    {bot && bot.chkBoxSummary && state.checkedA != true && (\r\n                        <h5>Extractive Summary</h5>\r\n                    )}\r\n                    {bot && bot.chkBoxSummary && state.checkedA == true && (\r\n                        <TextField\r\n                            id=\"standard-multiline-flexible\"\r\n                            multiline\r\n                            fullWidth\r\n                            rowsMax={30}\r\n                            value={bot && bot.summarisation_A}\r\n                        />)\r\n                    }\r\n                    {bot && bot.chkBoxSummary && state.checkedA != true &&  (    \r\n                        <TextField\r\n                            id=\"standard-multiline-flexible\"\r\n                            multiline\r\n                            fullWidth \r\n                            rowsMax={30}\r\n                            value={bot && bot.summarisation_E}\r\n                        />)\r\n                    }\r\n                    <br /><br />\r\n                    {bot && bot.chkBoxTopics && (\r\n                        <h5>Topics & Sentences</h5>\r\n                    )}   \r\n                    {bot && bot.chkBoxTopics && state.checkedA == true && bot.abstractiveTopicSentences && Object.keys(bot.abstractiveTopicSentences).map((key, i) => (\r\n                        <p key={i}>\r\n                            <br />\r\n                            <h6>Topics: {key}</h6>\r\n                            {bot.abstractiveTopicSentences[key].map(sentence =>(\r\n                                <p class=\"sentence-left\">{sentence}</p>\r\n                            ))}\r\n                        </p>\r\n                    ))}\r\n                    {bot && bot.chkBoxTopics && state.checkedA != true && bot.extractiveTopicSentences && Object.keys(bot.extractiveTopicSentences).map((key, i) => (\r\n                        <p key={i}>\r\n                            <br />\r\n                            <h6>Topics: {key}</h6>\r\n                            {bot.extractiveTopicSentences[key].map(sentence => (\r\n                                <p class=\"sentence-left\">{sentence}</p>\r\n                            ))}\r\n                        </p>\r\n                    ))}\r\n                    <br /><br />\r\n                    {bot && bot.chkBoxEntities && (\r\n                        <h5>Tagged Entities</h5> \r\n                    )}\r\n                    {bot && bot.chkBoxEntities && bot.entities && bot.entities.map(entity => (\r\n                        <Link className=\"tagged-links\" to={`/entity/${entity}`}>\r\n                            { entity }\r\n                        </Link>\r\n                    ))}\r\n                    <br />\r\n                </div>\r\n            </div>          \r\n      </div> \r\n             \r\n    ); \r\n}\r\n\r\nexport default BotList;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\global.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBotModal.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBot.js",["105"],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\modalAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\botListAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\reportListAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\entityAction.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":3,"column":23,"nodeType":"112","messageId":"113","endLine":3,"endColumn":34},{"ruleId":"114","severity":1,"message":"115","line":27,"column":10,"nodeType":"116","endLine":27,"endColumn":20,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"111","line":2,"column":23,"nodeType":"112","messageId":"113","endLine":2,"endColumn":34},{"ruleId":"110","severity":1,"message":"118","line":3,"column":13,"nodeType":"112","messageId":"113","endLine":3,"endColumn":19},{"ruleId":"110","severity":1,"message":"119","line":18,"column":9,"nodeType":"112","messageId":"113","endLine":18,"endColumn":22},{"ruleId":"114","severity":1,"message":"120","line":33,"column":8,"nodeType":"116","endLine":33,"endColumn":18,"suggestions":"121"},{"ruleId":"110","severity":1,"message":"122","line":11,"column":13,"nodeType":"112","messageId":"113","endLine":11,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":102,"column":65,"nodeType":"125","messageId":"126","endLine":102,"endColumn":67},{"ruleId":"123","severity":1,"message":"127","line":105,"column":65,"nodeType":"125","messageId":"126","endLine":105,"endColumn":67},{"ruleId":"123","severity":1,"message":"124","line":108,"column":65,"nodeType":"125","messageId":"126","endLine":108,"endColumn":67},{"ruleId":"123","severity":1,"message":"127","line":117,"column":65,"nodeType":"125","messageId":"126","endLine":117,"endColumn":67},{"ruleId":"123","severity":1,"message":"124","line":130,"column":64,"nodeType":"125","messageId":"126","endLine":130,"endColumn":66},{"ruleId":"123","severity":1,"message":"127","line":139,"column":64,"nodeType":"125","messageId":"126","endLine":139,"endColumn":66},{"ruleId":"110","severity":1,"message":"128","line":56,"column":17,"nodeType":"112","messageId":"113","endLine":56,"endColumn":20},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'action' is defined but never used.","'reportContent' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["132"],"'CONSTANTS' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [dispatch, name]",{"range":"137","text":"138"},"Update the dependencies array to be: [dispatch, id]",{"range":"139","text":"140"},[1062,1072],"[dispatch, name]",[1264,1274],"[dispatch, id]"]