[{"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\index.js":"1","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\App.js":"2","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\index.js":"3","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\Home.js":"4","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\reportListReducer.js":"5","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\modalReducer.js":"6","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\entityReducer.js":"7","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\botListReducer.js":"8","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\ReportDisplay.js":"9","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\index.js":"10","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\BotList.js":"11","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\NavBar.js":"12","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBotModal.js":"13","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\ReportIdList.js":"14","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\index.js":"15","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBot.js":"16","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\botListAction.js":"17","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\reportListAction.js":"18","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\modalAction.js":"19","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\entityAction.js":"20","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\global.js":"21","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\EntityDisplay.js":"22"},{"size":538,"mtime":1611290659191,"results":"23","hashOfConfig":"24"},{"size":1030,"mtime":1614570570230,"results":"25","hashOfConfig":"24"},{"size":464,"mtime":1611330656617,"results":"26","hashOfConfig":"24"},{"size":633,"mtime":1614657263388,"results":"27","hashOfConfig":"24"},{"size":492,"mtime":1611512387579,"results":"28","hashOfConfig":"24"},{"size":1074,"mtime":1611329195464,"results":"29","hashOfConfig":"24"},{"size":480,"mtime":1611327840926,"results":"30","hashOfConfig":"24"},{"size":682,"mtime":1611309147611,"results":"31","hashOfConfig":"24"},{"size":2933,"mtime":1614611282908,"results":"32","hashOfConfig":"24"},{"size":112,"mtime":1611290659193,"results":"33","hashOfConfig":"24"},{"size":5011,"mtime":1614676198289,"results":"34","hashOfConfig":"24"},{"size":535,"mtime":1615047578064,"results":"35","hashOfConfig":"24"},{"size":1154,"mtime":1612708968829,"results":"36","hashOfConfig":"24"},{"size":1487,"mtime":1614598987530,"results":"37","hashOfConfig":"24"},{"size":134,"mtime":1611330122768,"results":"38","hashOfConfig":"24"},{"size":2984,"mtime":1614675461038,"results":"39","hashOfConfig":"24"},{"size":1085,"mtime":1614575914637,"results":"40","hashOfConfig":"24"},{"size":655,"mtime":1614601737715,"results":"41","hashOfConfig":"24"},{"size":1099,"mtime":1611328912402,"results":"42","hashOfConfig":"24"},{"size":631,"mtime":1614569931124,"results":"43","hashOfConfig":"24"},{"size":330,"mtime":1614601042158,"results":"44","hashOfConfig":"24"},{"size":2509,"mtime":1614611282908,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"vlm0od",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\index.js",[],["98","99"],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\App.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\Home.js",["100"],"import React from \"react\";\r\n//import {CreateBotModal} from \".\";\r\nimport BotList from \"./BotList\"\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Home() {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container fluid=\"md\">\r\n        {/*<Row>*/}\r\n          {/*<CreateBotModal />*/}\r\n          {/*<Link to=\"/createBot\">Create Bot</Link>*/}\r\n        {/*</Row>*/}\r\n        <Row>\r\n          \r\n          <BotList/>\r\n        </Row>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\reportListReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\modalReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\entityReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\botListReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\ReportDisplay.js",["101","102","103"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport * as action from \"../../store/actions\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport stripquotes from \"stripquotes\";\r\nimport axios from 'axios';\r\nimport * as CONSTANTS from '../../global';\r\n\r\nconst ReportDisplay = () => {\r\n\r\n    const { id } = useParams();\r\n    //const reportredux = useSelector(state => state.report.item);\r\n    const dispatch = useDispatch();\r\n    const [report, setReport] = useState(null);\r\n\r\n    useEffect(() => {\r\n      console.log(\"report id: \" + id);     \r\n      //dispatch(action.getreportByID(id));\r\n      axios.get(CONSTANTS.GLOBAL_URL + \"/report/retrieveById/\" + id)\r\n      .then((response) => {\r\n        console.log(\"response: \" + JSON.stringify(response));\r\n        setReport(response);\r\n      }, (error) => {\r\n        console.log(\"error: \" + JSON.stringify(error));\r\n      });\r\n    }, [dispatch])\r\n\r\n    return (\r\n        report !== null ? (\r\n        <div className=\"Report-Display\" style={{width: '100%' }}>\r\n            <h3>Display Report</h3>\r\n            <br /><br />\r\n            <h6>Tagged Entities:</h6>\r\n            {report.data.taggedEntities.map(entity => (\r\n                <Link className=\"tagged-entities\" to={`/entity/${entity}`}>\r\n                    { entity }\r\n                </Link>\r\n            ))}\r\n            <br /><br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'ID'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(report.data.reportDocid))}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Date'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(report.data.reportDate))}\r\n            />\r\n            <br /><br />                       \r\n            <TextField \r\n                type='text'\r\n                label = 'Title'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(report.data.reportTitle))}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text' \r\n                label = 'Content'  \r\n                variant='outlined'\r\n                multiline\r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(report.data.reportContent)).replace(/\\r?\\n|\\r/g, \" \")}\r\n            />\r\n        </div>\r\n        ) : (\r\n           <div>Loading...</div> \r\n        )\r\n    );\r\n}\r\n \r\nexport default ReportDisplay;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\BotList.js",["104"],"import React, { useEffect } from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as action from \"../../store/actions\";\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nfunction BotList() {\r\n    const botList = useSelector(state => state.botList.items)\r\n    const bot = useSelector(state => state.botList.botDetails)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(action.getBotList());\r\n    }, [dispatch])\r\n\r\n    function retrieveBot(id) {\r\n        dispatch(action.getBotByID(id));\r\n    }\r\n\r\n    const [state, setState] = React.useState({\r\n        checkedA: true,      \r\n      });\r\n    \r\n      const handleChange = (event) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n      };\r\n\r\n    return (\r\n        <div className=\"d-flex flex-row\">\r\n        <br/><br />\r\n            <div className=\"d-flex flex-column\" style={{width: \"18em\"}}>\r\n                <h4 style={{textAlign: 'left'}}>Bot List</h4>\r\n                <ul className='bot-list'>\r\n                    {botList.map(el => (\r\n                        <li className='bullets-left'><Button className=\"list-bots\" onClick={() => retrieveBot(el.id)}>{el.jobName}</Button></li>\r\n                    ))} \r\n                </ul>\r\n            </div>\r\n            <div className=\"flex-column\" style={{width: \"45em\"}}>             \r\n                <br />\r\n                <label>Bot Name</label>&nbsp;&nbsp;&nbsp;\r\n                <TextField \r\n                type='text'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={bot && bot.jobName}\r\n                />\r\n                <br /><br />\r\n                <label>Start Date</label>&nbsp;&nbsp;&nbsp;\r\n                <TextField \r\n                type='text'\r\n                variant='outlined'\r\n                style ={{width: '50%'}} \r\n                inputProps={{ readOnly: true }}\r\n                value={bot && bot.startDate}\r\n                />\r\n                <br /><br />\r\n                <label>End Date</label>&nbsp;&nbsp;&nbsp;\r\n                <TextField \r\n                type='text'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={bot && bot.endDate}\r\n                />\r\n                <br /><br />\r\n                <label>Keywords</label>&nbsp;&nbsp;&nbsp;\r\n                <TextField \r\n                type='text'\r\n                variant='outlined'\r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={bot && bot.keywords}\r\n                />\r\n                <br /><br />\r\n                <h5>Summary</h5>\r\n                {bot && (\r\n                <FormGroup row>\r\n                    <label>Extractive</label>&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <FormControlLabel\r\n                        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\r\n                    />\r\n                    <label>Abstractive</label>\r\n                </FormGroup>\r\n                )}\r\n                <div className=\"p-2 flex-fill\">\r\n                    {state.checkedA==true ?(\r\n                        <TextField\r\n                            id=\"standard-multiline-flexible\"\r\n                            multiline\r\n                            fullWidth\r\n                            rowsMax={30}\r\n                            value={bot && bot.summarisation_A}\r\n                        />\r\n                        ):(\r\n                        <TextField\r\n                            id=\"standard-multiline-flexible\"\r\n                            multiline\r\n                            fullWidth \r\n                            rowsMax={30}\r\n                            value={bot && bot.summarisation_E}\r\n                        />)}\r\n                    <br /><br />    \r\n                    <h6>Tagged Reports</h6>\r\n                    {bot && bot.taggedReports && bot.taggedReports.map(reportid=> (\r\n                         <Link className=\"tagged-links\" to={`/report/${reportid}`}>\r\n                            { reportid }\r\n                        </Link>\r\n                    ))}\r\n                    <br /><br />\r\n                    <h6>Tagged Entities</h6>\r\n                    {bot && bot.entities && bot.entities.map(entity => (\r\n                        <Link className=\"tagged-links\" to={`/entity/${entity}`}>\r\n                            { entity }\r\n                        </Link>\r\n                    ))}                  \r\n                </div>\r\n            </div>          \r\n      </div> \r\n    );\r\n}\r\n\r\nexport default BotList;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\NavBar.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBotModal.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\ReportIdList.js",["105"],"import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n//import { Button, Modal } from 'react-bootstrap';\r\n//import { useDispatch, useSelector} from \"react-redux\";\r\n//import * as action from \"../../store/actions\";\r\n\r\nconst ReportIdList = (props) => {\r\n\r\n    //const reportId = id.prop;\r\n    //const modalState = useSelector(state => state.modals.displayReportModal);\r\n    //const report = useSelector(state => state.report.item);\r\n    //const dispatch = useDispatch();\r\n\r\n    /*useEffect(() => {\r\n      dispatch(action.getreportByID(reportId));\r\n    }, [dispatch])\r\n\r\n    function handleModalShow(id){\r\n      dispatch(action.getreportByID(id));\r\n      dispatch(action.openReportDialog()); \r\n    }\r\n\r\n    function handleModalClose(){\r\n      dispatch(action.closeReportDialog());\r\n    }*/\r\n\r\n    return(\r\n      <div>\r\n        <Link to={`/report/${(props.reportId)}`}>Report ID:\r\n          {JSON.stringify(props.reportId)}\r\n        </Link>\r\n\r\n        {/*JSON.stringify(report)}*/};   \r\n        {/*<Button onClick={() => handleModalShow(reportId)}>{JSON.stringify(reportId)}</Button>*/}\r\n        {/*<Modal style={{width: '100%' }} show={modalState} onHide={handleModalClose}>\r\n          <Modal.Header closeButton onClick={() => handleModalClose()}>\r\n          <Modal.Title>Display Report</Modal.Title>\r\n          </Modal.Header>\r\n          </Modal>*/}\r\n        {/*<ReportDisplay report={report}/> */} \r\n      </div>\r\n    )\r\n}\r\n    \r\nexport default ReportIdList;",["106","107"],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBot.js",["108","109","110"],"import { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {MuiPickersUtilsProvider,KeyboardDatePicker} from '@material-ui/pickers';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport axios from 'axios';\r\nimport * as CONSTANTS from '../../global';\r\n\r\nconst CreateBot = () => {\r\n    //const { register, handleSubmit } = useForm();\r\n    const [fromDate, setFromDate] = useState(new Date());\r\n    const [toDate, setToDate] = useState(new Date());\r\n    const [jobName, setJobName] = useState('');\r\n    const [keywords, setKeywords] = useState('');\r\n   \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let keywordsArray = keywords.split(\",\");\r\n        let postObject = {};\r\n        \r\n        postObject['jobName'] = jobName;\r\n        postObject['keywords'] = keywordsArray;\r\n        postObject['startDate'] = fromDate;\r\n        postObject['endDate'] = toDate;\r\n        \r\n        let output = JSON.stringify(postObject);\r\n        console.log(output);\r\n\r\n        const res = axios.put(CONSTANTS.GLOBAL_URL + '/bot/create1', output, {\r\n          headers: {\r\n            'Content-Type': CONSTANTS.APP_TYPE_JSON\r\n          }\r\n        }).then((response) => {\r\n          console.log(\"response: \" + JSON.stringify(response));\r\n        }, (error) => {\r\n          console.log(\"error: \" + JSON.stringify(error));\r\n        });\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setJobName(event.target.value);\r\n    }\r\n\r\n    const handleKeywordsChange = (event) => {\r\n        setKeywords(event.target.value);\r\n    }\r\n\r\n    const handleFromDateChange = (date) => {\r\n        setFromDate(date);\r\n    };\r\n\r\n    const handleToDateChange = (date) => {\r\n        setToDate(date);\r\n    };\r\n     \r\n    return (\r\n      <div className=\"Form-Create\">\r\n        <h3>Create New Bot</h3>\r\n        <br />\r\n        <form onSubmit={handleSubmit}> \r\n            <TextField name=\"jobName\" placeholder=\"Job Name\" variant=\"outlined\"\r\n            onChange={handleNameChange} />\r\n            <br /><br />\r\n            <TextField name=\"keywords\" placeholder=\"Keywords seperated by ,\" variant=\"outlined\"\r\n            onChange={handleKeywordsChange}/>\r\n            <br /><br /><br />\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker label=\"From:\" value={fromDate} onChange={handleFromDateChange}/>\r\n            </MuiPickersUtilsProvider>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker label=\"To:\" value={toDate} onChange={handleToDateChange}/>\r\n            </MuiPickersUtilsProvider>\r\n            <br /><br /><br />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"default\">Submit</Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default CreateBot;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\botListAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\reportListAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\modalAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\entityAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\global.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\EntityDisplay.js",["111","112"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport * as action from \"../../store/actions\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport * as CONSTANTS from '../../global';\r\n\r\nconst EntityDisplay = () => {\r\n    \r\n    const { name } = useParams();\r\n    //const entityDetails = useSelector(state => state.entity.item);\r\n    const dispatch = useDispatch();\r\n    //const reports = entityDetails.taggedReports;\r\n    const [entity, setEntity] = useState(null);\r\n\r\n    useEffect(() => {\r\n        console.log(\"entity name: \" + name);\r\n        dispatch(action.getEntityByName(name));\r\n        axios.get(CONSTANTS.GLOBAL_URL + \"/entity/retrieveByEntityName/\" + name)\r\n        .then((response) => {\r\n            console.log(\"response: \" + JSON.stringify(response));\r\n            setEntity(response);\r\n          }, (error) => {\r\n            console.log(\"error: \" + JSON.stringify(error));\r\n        });\r\n      }, [dispatch])\r\n\r\n    return (  \r\n        entity !== null ? (\r\n        <div className=\"Entity-Display\" style={{width: '100%' }}>\r\n            <h3>{name}</h3>\r\n            <br /><br />\r\n            <h6>Tagged Report IDs:</h6>\r\n            {entity.data.taggedReports.map(reportid => (\r\n                <Link className=\"tagged-links\" to={`/report/${reportid}`}>\r\n                    { reportid }\r\n                </Link>\r\n            ))}\r\n            <br /><br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Gender'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityGender}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Country'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityCountry}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Appointment'\r\n                variant='outlined' \r\n                style ={{width: '30%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityAppointment}\r\n            />\r\n            <br /><br />        \r\n        </div>\r\n         ) : (\r\n            <div>Loading...</div> \r\n         )\r\n    );\r\n}\r\n \r\nexport default EntityDisplay;",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":7,"column":9,"nodeType":"119","messageId":"120","endLine":7,"endColumn":13},{"ruleId":"117","severity":1,"message":"121","line":2,"column":23,"nodeType":"119","messageId":"120","endLine":2,"endColumn":34},{"ruleId":"117","severity":1,"message":"122","line":3,"column":13,"nodeType":"119","messageId":"120","endLine":3,"endColumn":19},{"ruleId":"123","severity":1,"message":"124","line":27,"column":8,"nodeType":"125","endLine":27,"endColumn":18,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":93,"column":36,"nodeType":"129","messageId":"130","endLine":93,"endColumn":38},{"ruleId":"117","severity":1,"message":"131","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"113","replacedBy":"132"},{"ruleId":"115","replacedBy":"133"},{"ruleId":"117","severity":1,"message":"134","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":17},{"ruleId":"117","severity":1,"message":"135","line":3,"column":8,"nodeType":"119","messageId":"120","endLine":3,"endColumn":12},{"ruleId":"117","severity":1,"message":"136","line":33,"column":15,"nodeType":"119","messageId":"120","endLine":33,"endColumn":18},{"ruleId":"117","severity":1,"message":"121","line":3,"column":23,"nodeType":"119","messageId":"120","endLine":3,"endColumn":34},{"ruleId":"123","severity":1,"message":"137","line":27,"column":10,"nodeType":"125","endLine":27,"endColumn":20,"suggestions":"138"},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'action' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["141"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.",["139"],["140"],"'useForm' is defined but never used.","'Form' is defined but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["142"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [dispatch, id]",{"range":"147","text":"148"},"Update the dependencies array to be: [dispatch, name]",{"range":"149","text":"150"},[1003,1013],"[dispatch, id]",[1062,1072],"[dispatch, name]"]