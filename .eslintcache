[{"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/index.js":"1","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/App.js":"2","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/index.js":"3","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/ReportDisplay.js":"4","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/Home.js":"5","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/EntityDisplay.js":"6","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/NavBar.js":"7","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/modalReducer.js":"8","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/botListReducer.js":"9","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/reportListReducer.js":"10","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/entityReducer.js":"11","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/index.js":"12","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/global.js":"13","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/BotList.js":"14","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/CreateBotModal.js":"15","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/index.js":"16","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/CreateBot.js":"17","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/modalAction.js":"18","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/reportListAction.js":"19","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/botListAction.js":"20","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/entityAction.js":"21"},{"size":517,"mtime":1616030473221,"results":"22","hashOfConfig":"23"},{"size":981,"mtime":1616030473221,"results":"24","hashOfConfig":"23"},{"size":450,"mtime":1616030474881,"results":"25","hashOfConfig":"23"},{"size":3196,"mtime":1616034805262,"results":"26","hashOfConfig":"23"},{"size":385,"mtime":1616030473221,"results":"27","hashOfConfig":"23"},{"size":2456,"mtime":1616030473221,"results":"28","hashOfConfig":"23"},{"size":513,"mtime":1616030473221,"results":"29","hashOfConfig":"23"},{"size":1031,"mtime":1616030474881,"results":"30","hashOfConfig":"23"},{"size":652,"mtime":1616030474881,"results":"31","hashOfConfig":"23"},{"size":468,"mtime":1616030474881,"results":"32","hashOfConfig":"23"},{"size":456,"mtime":1616030474881,"results":"33","hashOfConfig":"23"},{"size":110,"mtime":1616030473221,"results":"34","hashOfConfig":"23"},{"size":595,"mtime":1616031493332,"results":"35","hashOfConfig":"23"},{"size":5085,"mtime":1616031629293,"results":"36","hashOfConfig":"23"},{"size":1119,"mtime":1616030473221,"results":"37","hashOfConfig":"23"},{"size":131,"mtime":1616030474881,"results":"38","hashOfConfig":"23"},{"size":3469,"mtime":1616030473221,"results":"39","hashOfConfig":"23"},{"size":1049,"mtime":1616030474881,"results":"40","hashOfConfig":"23"},{"size":627,"mtime":1616030474881,"results":"41","hashOfConfig":"23"},{"size":1025,"mtime":1616030474881,"results":"42","hashOfConfig":"23"},{"size":603,"mtime":1616030474881,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"790oea",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/index.js",[],["90","91"],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/App.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/index.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/ReportDisplay.js",["92","93","94","95"],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/Home.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/EntityDisplay.js",["96","97"],"import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector} from \"react-redux\";\nimport * as action from \"../../store/actions\";\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport * as CONSTANTS from '../../global';\n\nconst EntityDisplay = () => {\n    \n    const { name } = useParams();\n    //const entityDetails = useSelector(state => state.entity.item);\n    const dispatch = useDispatch();\n    //const reports = entityDetails.taggedReports;\n    const [entity, setEntity] = useState(null);\n\n    useEffect(() => {\n        console.log(\"entity name: \" + name);\n        dispatch(action.getEntityByName(name));\n        axios.get(CONSTANTS.GLOBAL_URL + \"/entity/retrieveByEntityName/\" + name)\n        .then((response) => {\n            console.log(\"response: \" + JSON.stringify(response));\n            setEntity(response);\n          }, (error) => {\n            console.log(\"error: \" + JSON.stringify(error));\n        });\n      }, [dispatch])\n\n    return (  \n        entity !== null ? (\n        <div className=\"Entity-Display\" style={{width: '100%' }}>\n            <br />\n            <h3>{name}</h3>\n            <br /><br />\n            <h6>Tagged Report IDs:</h6>\n            {entity.data.taggedReports.map(reportid => (\n                <Link className=\"tagged-links\" to={`/report/${reportid}`}>\n                    { reportid }\n                </Link>\n            ))}\n            <br /><br /><br />\n            <TextField \n                type='text'\n                label = 'Gender'\n                variant='outlined' \n                inputProps={{ readOnly: true }}\n                value={entity.data.entityGender}\n            />\n            <br /><br />\n            <TextField \n                type='text'\n                label = 'Country'\n                variant='outlined' \n                inputProps={{ readOnly: true }}\n                value={entity.data.entityCountry}\n            />\n            <br /><br />\n            <TextField \n                type='text'\n                label = 'Appointment'\n                variant='outlined' \n                style ={{width: '30%'}}\n                inputProps={{ readOnly: true }}\n                value={entity.data.entityAppointment}\n            />\n            <br /><br />        \n        </div>\n         ) : (\n            <div>Loading...</div> \n         )\n    );\n}\n \nexport default EntityDisplay;","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/NavBar.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/modalReducer.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/botListReducer.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/reportListReducer.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/reducers/entityReducer.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/index.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/global.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/BotList.js",["98"],"import React, { useEffect } from \"react\";\nimport { Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as action from \"../../store/actions\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport moment from 'moment'\n\nfunction BotList() {\n    const botList = useSelector(state => state.botList.items)\n    const bot = useSelector(state => state.botList.botDetails)\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(action.getBotList());\n    }, [dispatch])\n\n    function retrieveBot(id) {\n        dispatch(action.getBotByID(id));\n    }\n\n    const [state, setState] = React.useState({\n        checkedA: true,      \n      });\n    \n      const handleChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n      };\n\n    return (\n        <div className=\"d-flex flex-row\">\n            <div className=\"d-flex flex-column\" style={{width: \"18em\", backgroundColor: \"ghostwhite\"}}>\n                <br />\n                <h4 style={{textAlign: 'center'}}>Bot List</h4>\n                <ul className='bot-list'>\n                    {botList.map(el => (\n                        <li className='bullets-left'><Button className=\"list-bots\" onClick={() => retrieveBot(el.id)}>{el.jobName}</Button></li>\n                    ))} \n                    </ul>\n            </div>\n            <div className=\"flex-column\" style={{width: \"8em\"}}></div>\n            <div className=\"flex-column\" style={{width: \"45em\"}}>             \n                <br /><br />\n                <label>Bot Name</label>&nbsp;&nbsp;&nbsp;\n                <TextField \n                type='text'\n                variant='outlined' \n                style ={{width: '50%'}}\n                inputProps={{ readOnly: true }}\n                value={bot && bot.jobName}\n                />\n                <br /><br />\n                <label>Start Date</label>&nbsp;&nbsp;&nbsp;\n                <TextField \n                type='text'\n                variant='outlined'\n                style ={{width: '50%'}} \n                inputProps={{ readOnly: true }}\n                value={bot && moment(bot.startDate).format(\"DD/MM/YYYY\")}\n                />\n                <br /><br />\n                <label>End Date</label>&nbsp;&nbsp;&nbsp;\n                <TextField \n                type='text'\n                variant='outlined' \n                style ={{width: '50%'}}\n                inputProps={{ readOnly: true }}\n                value={bot && moment(bot.endDate).format(\"DD/MM/YYYY\")}\n                />\n                <br /><br />\n                <label>Keywords</label>&nbsp;&nbsp;&nbsp;\n                <TextField \n                type='text'\n                variant='outlined'\n                style ={{width: '50%'}}\n                inputProps={{ readOnly: true }}\n                value={bot && bot.keywords}\n                />\n                <br /><br />\n                <h5>Summary</h5>\n                {bot && (\n                <FormGroup row>\n                    <label>Extractive</label>&nbsp;&nbsp;&nbsp;&nbsp;\n                    <FormControlLabel\n                        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n                    />\n                    <label>Abstractive</label>\n                </FormGroup>\n                )}\n                <div className=\"p-2 flex-fill\">\n                    {state.checkedA==true ?(\n                        <TextField\n                            id=\"standard-multiline-flexible\"\n                            multiline\n                            fullWidth\n                            rowsMax={30}\n                            value={bot && bot.summarisation_A}\n                        />\n                        ):(\n                        <TextField\n                            id=\"standard-multiline-flexible\"\n                            multiline\n                            fullWidth \n                            rowsMax={30}\n                            value={bot && bot.summarisation_E}\n                        />)}\n                    <br /><br />    \n                    <h6>Tagged Reports</h6>\n                    {bot && bot.taggedReports && bot.taggedReports.map(reportid=> (\n                         <Link className=\"tagged-links\" to={`/report/${reportid}`}>\n                            { reportid }\n                        </Link>\n                    ))}\n                    <br /><br />\n                    <h6>Tagged Entities</h6>\n                    {bot && bot.entities && bot.entities.map(entity => (\n                        <Link className=\"tagged-links\" to={`/entity/${entity}`}>\n                            { entity }\n                        </Link>\n                    ))}                  \n                </div>\n            </div>          \n      </div> \n    );\n}\n\nexport default BotList;","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/CreateBotModal.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/index.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/components/KMList/CreateBot.js",["99"],"import { useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {MuiPickersUtilsProvider,KeyboardDatePicker} from '@material-ui/pickers';\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport axios from 'axios';\nimport * as CONSTANTS from '../../global';\n\nconst SubmitSwal = withReactContent(Swal);\n\nconst CreateBot = () => {\n    //const { register, handleSubmit } = useForm();\n    const [fromDate, setFromDate] = useState(new Date());\n    const [toDate, setToDate] = useState(new Date());\n    const [jobName, setJobName] = useState('');\n    const [keywords, setKeywords] = useState('');\n   \n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        let keywordsArray = keywords.split(\",\");\n        let postObject = {};\n        \n        postObject['jobName'] = jobName;\n        postObject['keywords'] = keywordsArray;\n        postObject['startDate'] = fromDate;\n        postObject['endDate'] = toDate;\n        \n        let output = JSON.stringify(postObject);\n        console.log(output);\n        \n        if(jobName === '' || keywords === '' )\n        {\n          SubmitSwal.fire({\n            title: CONSTANTS.BOTEMPTYTITLE,\n            text: CONSTANTS.BOTEMPTYMSG,\n            icon: 'error',\n            confirmButtonText: 'OK'\n          })\n        }\n        else\n        {\n          const res = axios.put(CONSTANTS.GLOBAL_URL + '/bot/create1', output, {\n            headers: {\n              'Content-Type': CONSTANTS.APP_TYPE_JSON\n            }}\n          ).then((response) => {\n            console.log(\"response: \" + JSON.stringify(response));\n          }, (error) => {\n            console.log(\"error: \" + JSON.stringify(error));\n          });\n\n          SubmitSwal.fire({\n            title: CONSTANTS.BOTSUBMITTITLE,\n            text: CONSTANTS.BOTSUBMITMSG,\n            icon: 'info',\n            confirmButtonText: 'OK'\n          })\n        }\n    }\n\n    const handleNameChange = (event) => {\n        setJobName(event.target.value);\n    }\n\n    const handleKeywordsChange = (event) => {\n        setKeywords(event.target.value);\n    }\n\n    const handleFromDateChange = (date) => {\n        setFromDate(date);\n    };\n\n    const handleToDateChange = (date) => {\n        setToDate(date);\n    };\n     \n    return (\n      <div className=\"Form-Create\">\n        <br />\n        <h3>Create New Bot</h3>\n        <br />\n        <form onSubmit={handleSubmit}> \n            <TextField name=\"jobName\" placeholder=\"Job Name\" variant=\"outlined\"\n            onChange={handleNameChange} />\n            <br /><br />\n            <TextField name=\"keywords\" placeholder=\"Keywords seperated by ,\" variant=\"outlined\"\n            onChange={handleKeywordsChange}/>\n            <br /><br /><br />\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker label=\"From:\" value={fromDate} onChange={handleFromDateChange}/>\n            </MuiPickersUtilsProvider>\n            &nbsp;&nbsp;&nbsp;\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker label=\"To:\" value={toDate} onChange={handleToDateChange}/>\n            </MuiPickersUtilsProvider>\n            <br /><br /><br />\n            <Button type=\"submit\" variant=\"contained\" color=\"default\">Submit</Button>\n        </form>\n      </div>\n    );\n  }\n\n  export default CreateBot;","/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/modalAction.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/reportListAction.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/botListAction.js",[],"/home/raymond/Expt/innohack/huggingface/ml_api/application/kb_front_end/KnowledgeBot/src/store/actions/entityAction.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":2,"column":23,"nodeType":"106","messageId":"107","endLine":2,"endColumn":34},{"ruleId":"104","severity":1,"message":"108","line":3,"column":13,"nodeType":"106","messageId":"107","endLine":3,"endColumn":19},{"ruleId":"104","severity":1,"message":"109","line":18,"column":9,"nodeType":"106","messageId":"107","endLine":18,"endColumn":22},{"ruleId":"110","severity":1,"message":"111","line":33,"column":8,"nodeType":"112","endLine":33,"endColumn":18,"suggestions":"113"},{"ruleId":"104","severity":1,"message":"105","line":3,"column":23,"nodeType":"106","messageId":"107","endLine":3,"endColumn":34},{"ruleId":"110","severity":1,"message":"114","line":27,"column":10,"nodeType":"112","endLine":27,"endColumn":20,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":94,"column":36,"nodeType":"118","messageId":"119","endLine":94,"endColumn":38},{"ruleId":"104","severity":1,"message":"120","line":46,"column":17,"nodeType":"106","messageId":"107","endLine":46,"endColumn":20},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'action' is defined but never used.","'reportContent' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["123"],"React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["124"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [dispatch, id]",{"range":"129","text":"130"},"Update the dependencies array to be: [dispatch, name]",{"range":"131","text":"132"},[1232,1242],"[dispatch, id]",[1036,1046],"[dispatch, name]"]