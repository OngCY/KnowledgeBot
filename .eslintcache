[{"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\index.js":"1","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\App.js":"2","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\index.js":"3","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\Home.js":"4","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\EntityDisplay.js":"5","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\NavBar.js":"6","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\modalReducer.js":"7","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\reportListReducer.js":"8","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\botListReducer.js":"9","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\entityReducer.js":"10","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\ReportDisplay.js":"11","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\index.js":"12","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\BotList.js":"13","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\global.js":"14","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBotModal.js":"15","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\index.js":"16","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBot.js":"17","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\modalAction.js":"18","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\botListAction.js":"19","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\reportListAction.js":"20","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\entityAction.js":"21"},{"size":538,"mtime":1611290659191,"results":"22","hashOfConfig":"23"},{"size":1016,"mtime":1615096705934,"results":"24","hashOfConfig":"23"},{"size":464,"mtime":1611330656617,"results":"25","hashOfConfig":"23"},{"size":403,"mtime":1615096656722,"results":"26","hashOfConfig":"23"},{"size":2529,"mtime":1615098602350,"results":"27","hashOfConfig":"23"},{"size":535,"mtime":1615047578064,"results":"28","hashOfConfig":"23"},{"size":1074,"mtime":1611329195464,"results":"29","hashOfConfig":"23"},{"size":492,"mtime":1611512387579,"results":"30","hashOfConfig":"23"},{"size":682,"mtime":1611309147611,"results":"31","hashOfConfig":"23"},{"size":480,"mtime":1611327840926,"results":"32","hashOfConfig":"23"},{"size":3286,"mtime":1616998725906,"results":"33","hashOfConfig":"23"},{"size":112,"mtime":1611290659193,"results":"34","hashOfConfig":"23"},{"size":7083,"mtime":1619881634482,"results":"35","hashOfConfig":"23"},{"size":5957,"mtime":1618137157306,"results":"36","hashOfConfig":"23"},{"size":1154,"mtime":1612708968829,"results":"37","hashOfConfig":"23"},{"size":134,"mtime":1611330122768,"results":"38","hashOfConfig":"23"},{"size":5289,"mtime":1617009553459,"results":"39","hashOfConfig":"23"},{"size":1099,"mtime":1611328912402,"results":"40","hashOfConfig":"23"},{"size":1085,"mtime":1614575914637,"results":"41","hashOfConfig":"23"},{"size":655,"mtime":1614601737715,"results":"42","hashOfConfig":"23"},{"size":631,"mtime":1614569931124,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"vlm0od",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\index.js",[],["91","92"],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\App.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\Home.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\EntityDisplay.js",["93","94"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport * as action from \"../../store/actions\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport * as CONSTANTS from '../../global';\r\n\r\nconst EntityDisplay = () => {\r\n    \r\n    const { name } = useParams();\r\n    //const entityDetails = useSelector(state => state.entity.item);\r\n    const dispatch = useDispatch();\r\n    //const reports = entityDetails.taggedReports;\r\n    const [entity, setEntity] = useState(null);\r\n\r\n    useEffect(() => {\r\n        console.log(\"entity name: \" + name);\r\n        dispatch(action.getEntityByName(name));\r\n        axios.get(CONSTANTS.GLOBAL_URL + \"/entity/retrieveByEntityName/\" + name)\r\n        .then((response) => {\r\n            console.log(\"response: \" + JSON.stringify(response));\r\n            setEntity(response);\r\n          }, (error) => {\r\n            console.log(\"error: \" + JSON.stringify(error));\r\n        });\r\n      }, [dispatch])\r\n\r\n    return (  \r\n        entity !== null ? (\r\n        <div className=\"Entity-Display\" style={{width: '100%' }}>\r\n            <br />\r\n            <h3>{name}</h3>\r\n            <br /><br />\r\n            <h6>Tagged Report IDs:</h6>\r\n            {entity.data.taggedReports.map(reportid => (\r\n                <Link className=\"tagged-links\" to={`/report/${reportid}`}>\r\n                    { reportid }\r\n                </Link>\r\n            ))}\r\n            <br /><br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Gender'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityGender}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Country'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityCountry}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Appointment'\r\n                variant='outlined' \r\n                style ={{width: '30%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={entity.data.entityAppointment}\r\n            />\r\n            <br /><br />        \r\n        </div>\r\n         ) : (\r\n            <div>Loading...</div> \r\n         )\r\n    );\r\n}\r\n \r\nexport default EntityDisplay;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\NavBar.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\modalReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\reportListReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\botListReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\reducers\\entityReducer.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\ReportDisplay.js",["95","96","97","98"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport * as action from \"../../store/actions\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport stripquotes from \"stripquotes\";\r\nimport axios from 'axios';\r\nimport * as CONSTANTS from '../../global';\r\nimport moment from 'moment'\r\nimport ReactHtmlParser from 'react-html-parser'\r\n\r\nconst ReportDisplay = () => {\r\n\r\n    const { id } = useParams();\r\n    //const reportredux = useSelector(state => state.report.item);\r\n    const dispatch = useDispatch();\r\n    const [report, setReport] = useState(null);\r\n    let reportContent=\"\";\r\n    \r\n    useEffect(() => {\r\n      console.log(\"report id: \" + id);     \r\n      //dispatch(action.getreportByID(id));\r\n      axios.get(CONSTANTS.GLOBAL_URL + \"/report/retrieveById/\" + id)\r\n      .then((response) => {\r\n        //reportContent = stripquotes(JSON.stringify(response.data.reportContent));\r\n        //console.log(\"report content \" + reportContent);\r\n\r\n        setReport(response);      \r\n        console.log(\"response: \" + JSON.stringify(response));\r\n      }, (error) => {\r\n        console.log(\"error: \" + JSON.stringify(error));\r\n      });\r\n    }, [dispatch])\r\n\r\n    return (\r\n        report !== null ? (\r\n        <div className=\"Report-Display\" style={{width: '100%' }}>\r\n            <br />\r\n            <h3>Display Report</h3>\r\n            <br /><br />\r\n            <h6>Tagged Entities:</h6>\r\n            {report.data.taggedEntities.map(entity => (\r\n               <Link className=\"tagged-links\" to={`/entity/${entity}`}>\r\n                    { entity }\r\n                </Link>\r\n            ))}\r\n            <br /><br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'ID'\r\n                variant='outlined' \r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(report.data.reportDocid))}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text'\r\n                label = 'Date'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(moment(report.data.reportDate).format(\"DD/MM/YYYY\")))}\r\n            />\r\n            <br /><br />                       \r\n            <TextField \r\n                type='text'\r\n                label = 'Title'\r\n                variant='outlined' \r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n                value={stripquotes(JSON.stringify(report.data.reportTitle))}\r\n            />\r\n            <br /><br />\r\n            <TextField \r\n                type='text' \r\n                label = 'Content'  \r\n                variant='outlined'\r\n                multiline\r\n                style ={{width: '50%'}}\r\n                inputProps={{ readOnly: true }}\r\n              //  value={stripquotes(JSON.stringify(report.data.reportContent))}\r\n              value = {ReactHtmlParser(report.data.reportContent)}\r\n            />\r\n        </div>\r\n        ) : (\r\n           <div>Loading...</div> \r\n        )\r\n    );\r\n}\r\n \r\nexport default ReportDisplay;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\BotList.js",["99","100","101","102","103","104","105"],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\global.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBotModal.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\index.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\components\\KMList\\CreateBot.js",["106"],"import { useState } from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport {MuiPickersUtilsProvider,KeyboardDatePicker} from '@material-ui/pickers';\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport axios from 'axios';\r\nimport * as CONSTANTS from '../../global';\r\n\r\nconst SubmitSwal = withReactContent(Swal);\r\n\r\nconst CreateBot = () => {\r\n    //const { register, handleSubmit } = useForm();\r\n    const [fromDate, setFromDate] = useState(new Date());\r\n    const [toDate, setToDate] = useState(new Date());\r\n    const [jobName, setJobName] = useState('');\r\n    const [keywords, setKeywords] = useState('');\r\n    const [chkState, setChkState] = useState({\r\n      chkBoxSummary: true,\r\n      chkBoxEntities: true,\r\n      chkBoxTopics: true\r\n    });\r\n   \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let keywordsArray = keywords.split(\",\");\r\n        let postObject = {};\r\n        \r\n        postObject['jobName'] = jobName;\r\n        postObject['keywords'] = keywordsArray;\r\n        postObject['startDate'] = fromDate;\r\n        postObject['endDate'] = toDate;\r\n        postObject['chkBoxSummary'] = chkState.chkBoxSummary;\r\n        postObject['chkBoxEntities'] = chkState.chkBoxEntities;\r\n        postObject['chkBoxTopics'] = chkState.chkBoxTopics;\r\n        \r\n        let output = JSON.stringify(postObject);\r\n        console.log(output);\r\n        \r\n        if(jobName === '' || keywords === '' )\r\n        {\r\n          SubmitSwal.fire({\r\n            title: CONSTANTS.BOTEMPTYTITLE,\r\n            text: CONSTANTS.BOTEMPTYMSG,\r\n            icon: 'error',\r\n            confirmButtonText: 'OK'\r\n          })\r\n        }\r\n        else\r\n        {\r\n          const res = axios.put(CONSTANTS.GLOBAL_URL + '/bot/create1', output, {\r\n            headers: {\r\n              'Content-Type': CONSTANTS.APP_TYPE_JSON\r\n            }}\r\n          ).then((response) => {\r\n            console.log(\"response: \" + JSON.stringify(response));\r\n          }, (error) => {\r\n            console.log(\"error: \" + JSON.stringify(error));\r\n          });\r\n\r\n          SubmitSwal.fire({\r\n            title: CONSTANTS.BOTSUBMITTITLE,\r\n            text: CONSTANTS.BOTSUBMITMSG,\r\n            icon: 'info',\r\n            confirmButtonText: 'OK'\r\n          })\r\n        }\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setJobName(event.target.value);\r\n    }\r\n\r\n    const handleKeywordsChange = (event) => {\r\n        setKeywords(event.target.value);\r\n    }\r\n\r\n    const handleFromDateChange = (date) => {\r\n        setFromDate(date);\r\n    };\r\n\r\n    const handleToDateChange = (date) => {\r\n        setToDate(date);\r\n    };\r\n\r\n    const handleChkChange = (event) => {\r\n      setChkState({ ...chkState, [event.target.name]: event.target.checked });\r\n    };\r\n     \r\n    return (\r\n      <div className=\"Form-Create\">\r\n        <br />\r\n        <h3>Create New Bot</h3>\r\n        <br />\r\n        <form onSubmit={handleSubmit}> \r\n            <TextField name=\"jobName\" placeholder=\"Job Name\" variant=\"outlined\"\r\n            onChange={handleNameChange} />\r\n            <br /><br />\r\n            <TextField name=\"keywords\" placeholder=\"Keywords seperated by ,\" variant=\"outlined\"\r\n            onChange={handleKeywordsChange}/>\r\n            <br /><br /><br />\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker label=\"From:\" value={fromDate} onChange={handleFromDateChange}/>\r\n            </MuiPickersUtilsProvider>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker label=\"To:\" value={toDate} onChange={handleToDateChange}/>\r\n            </MuiPickersUtilsProvider>\r\n            <br /><br /><br />\r\n            <label>Select Services: </label>&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  name=\"chkBoxSummary\"\r\n                  color=\"primary\"\r\n                  checked={chkState.chkBoxSummary}\r\n                  onChange={handleChkChange}\r\n                />\r\n              }\r\n              label=\"Summary\"\r\n            />&nbsp;\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  name=\"chkBoxEntites\"\r\n                  color=\"primary\"\r\n                  checked={chkState.chkBoxEntities}\r\n                  onChange={handleChkChange}\r\n                />\r\n              }\r\n              label=\"Entities\"\r\n            />&nbsp;\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  name=\"chkBoxTopics\"\r\n                  color=\"primary\"\r\n                  checked={chkState.chkBoxTopics}\r\n                  onChange={handleChkChange}\r\n                />\r\n              }\r\n              label=\"Topics\"\r\n            />\r\n            <br /><br /><br />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"default\">Submit</Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default CreateBot;","C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\modalAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\botListAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\reportListAction.js",[],"C:\\Git\\innohack-2021\\KnowledgeBot\\src\\store\\actions\\entityAction.js",[],["107","108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":3,"column":23,"nodeType":"115","messageId":"116","endLine":3,"endColumn":34},{"ruleId":"117","severity":1,"message":"118","line":27,"column":10,"nodeType":"119","endLine":27,"endColumn":20,"suggestions":"120"},{"ruleId":"113","severity":1,"message":"114","line":2,"column":23,"nodeType":"115","messageId":"116","endLine":2,"endColumn":34},{"ruleId":"113","severity":1,"message":"121","line":3,"column":13,"nodeType":"115","messageId":"116","endLine":3,"endColumn":19},{"ruleId":"113","severity":1,"message":"122","line":18,"column":9,"nodeType":"115","messageId":"116","endLine":18,"endColumn":22},{"ruleId":"117","severity":1,"message":"123","line":33,"column":8,"nodeType":"119","endLine":33,"endColumn":18,"suggestions":"124"},{"ruleId":"113","severity":1,"message":"125","line":11,"column":13,"nodeType":"115","messageId":"116","endLine":11,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":102,"column":65,"nodeType":"128","messageId":"129","endLine":102,"endColumn":67},{"ruleId":"126","severity":1,"message":"130","line":105,"column":65,"nodeType":"128","messageId":"129","endLine":105,"endColumn":67},{"ruleId":"126","severity":1,"message":"127","line":108,"column":65,"nodeType":"128","messageId":"129","endLine":108,"endColumn":67},{"ruleId":"126","severity":1,"message":"130","line":117,"column":65,"nodeType":"128","messageId":"129","endLine":117,"endColumn":67},{"ruleId":"126","severity":1,"message":"127","line":130,"column":64,"nodeType":"128","messageId":"129","endLine":130,"endColumn":66},{"ruleId":"126","severity":1,"message":"130","line":139,"column":64,"nodeType":"128","messageId":"129","endLine":139,"endColumn":66},{"ruleId":"113","severity":1,"message":"131","line":56,"column":17,"nodeType":"115","messageId":"116","endLine":56,"endColumn":20},{"ruleId":"109","replacedBy":"132"},{"ruleId":"111","replacedBy":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["136"],"'action' is defined but never used.","'reportContent' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["137"],"'CONSTANTS' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'res' is assigned a value but never used.",["134"],["135"],"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [dispatch, name]",{"range":"142","text":"143"},"Update the dependencies array to be: [dispatch, id]",{"range":"144","text":"145"},[1062,1072],"[dispatch, name]",[1264,1274],"[dispatch, id]"]